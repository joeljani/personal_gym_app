{"ast":null,"code":"var _jsxFileName = \"/Users/joeljani/3.Personal_Projects/1.Programming/my_gym_app/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport ReduxThunk from 'redux-thunk';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nconst logger = createLogger({\n  colors: false\n});\nconst initalState = {\n  workouts: [],\n  serverUrl: '',\n  serverError: false,\n  loading: false\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SERVER_URL_LOADING\":\n      return { ...state,\n        loading: action.loading\n      };\n\n    case \"SERVER_URL_LOADED\":\n      return { ...state,\n        serverUrl: action.serverUrl\n      };\n\n    case \"SERVER_URL_LOAD_FAILED\":\n      return { ...state,\n        serverError: true\n      };\n\n    case \"WORKOUTS_FETCHED\":\n      return { ...state,\n        workouts: action.workouts\n      };\n\n    case \"WORKOUTS_CHANGED\":\n      return { ...state,\n        workouts: action.workouts\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, initalState, applyMiddleware(ReduxThunk));\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n})), document.getElementById('app')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();","map":{"version":3,"sources":["/Users/joeljani/3.Personal_Projects/1.Programming/my_gym_app/frontend/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","Provider","applyMiddleware","createStore","createLogger","ReduxThunk","logger","colors","initalState","workouts","serverUrl","serverError","loading","reducer","state","action","type","store","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAAQC,eAAR,EAAyBC,WAAzB,QAA2C,OAA3C;AACA,SAAQC,YAAR,QAA2B,cAA3B;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,sCAAP;AACA,OAAO,aAAP;AACA,MAAMC,MAAM,GAAGF,YAAY,CAAC;AAACG,EAAAA,MAAM,EAAE;AAAT,CAAD,CAA3B;AAGA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,QAAQ,EAAE,EADM;AAEhBC,EAAAA,SAAS,EAAE,EAFK;AAGhBC,EAAAA,WAAW,EAAE,KAHG;AAIhBC,EAAAA,OAAO,EAAE;AAJO,CAApB;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,oBAAL;AAA2B,aAAO,EAAC,GAAGF,KAAJ;AAAWF,QAAAA,OAAO,EAAEG,MAAM,CAACH;AAA3B,OAAP;;AAC3B,SAAK,mBAAL;AAA0B,aAAQ,EAAC,GAAGE,KAAJ;AAAWJ,QAAAA,SAAS,EAAEK,MAAM,CAACL;AAA7B,OAAR;;AAC1B,SAAK,wBAAL;AAA+B,aAAQ,EAAC,GAAGI,KAAJ;AAAWH,QAAAA,WAAW,EAAE;AAAxB,OAAR;;AAC/B,SAAK,kBAAL;AAAyB,aAAQ,EAAC,GAAGG,KAAJ;AAAWL,QAAAA,QAAQ,EAAEM,MAAM,CAACN;AAA5B,OAAR;;AACzB,SAAK,kBAAL;AAAyB,aAAO,EAAC,GAAGK,KAAJ;AAAWL,QAAAA,QAAQ,EAAEM,MAAM,CAACN;AAA5B,OAAP;;AACzB;AAAS,aAAOK,KAAP;AANb;AAQH,CATD;;AAWA,MAAMG,KAAK,GAAGd,WAAW,CAACU,OAAD,EAAUL,WAAV,EAAuBN,eAAe,CAACG,UAAD,CAAtC,CAAzB;AAEAP,QAAQ,CAACoB,MAAT,CAAgB,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAwB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAxB,CAAhB,EAA2DE,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAA3D,E,CAEA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware, createStore} from 'redux'\nimport {createLogger} from 'redux-logger'\nimport ReduxThunk from 'redux-thunk';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css'\nconst logger = createLogger({colors: false})\n\n\nconst initalState = {\n    workouts: [],\n    serverUrl: '',\n    serverError: false,\n    loading: false\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"SERVER_URL_LOADING\": return({...state, loading: action.loading})\n        case \"SERVER_URL_LOADED\": return ({...state, serverUrl: action.serverUrl})\n        case \"SERVER_URL_LOAD_FAILED\": return ({...state, serverError: true})\n        case \"WORKOUTS_FETCHED\": return ({...state, workouts: action.workouts})\n        case \"WORKOUTS_CHANGED\": return({...state, workouts: action.workouts})\n        default: return state;\n    }\n}\n\nconst store = createStore(reducer, initalState, applyMiddleware(ReduxThunk))\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('app'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}