{"ast":null,"code":"var _jsxFileName = \"/Users/joeljani/3.Personal_Projects/1.Programming/my_gym_app/frontend/src/workouts/CurrentWeekPicker.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Button, Modal, ModalBody, ModalHeader } from \"reactstrap\";\nimport DayPicker from \"react-day-picker\";\nimport 'react-day-picker/lib/style.css';\nimport moment from \"moment\";\nimport 'moment/locale/de';\n\nconst CurrentWeekPicker = () => {\n  const initialWeek = {\n    from: moment(new Date()).startOf('week').toDate(),\n    to: moment(new Date()).endOf('week').toDate()\n  };\n  const [hoverRange, setHoverRange] = useState(undefined);\n  const [selectedDays, setSelectedDays] = useState(initialWeek);\n  const [modal, setModal] = useState(false);\n  const dispatch = useDispatch();\n\n  const toggle = () => {\n    setModal(!modal);\n    dispatch({\n      type: \"SET_CURRENT_WEEK\",\n      currentWeek: selectedDays\n    });\n  };\n\n  const handleDayChange = date => {\n    setSelectedDays(getWeekDays(getWeekRange(date).from));\n  };\n\n  const handleDayEnter = date => {\n    setHoverRange(getWeekRange(date));\n  };\n\n  const handleDayLeave = () => {\n    setHoverRange(undefined);\n  };\n\n  const handleWeekClick = (weekNumber, days, e) => {\n    setSelectedDays(days);\n  };\n\n  const daysAreSelected = selectedDays.length > 0;\n  const modifiers = {\n    hoverRange,\n    selectedRange: daysAreSelected && {\n      from: selectedDays[0],\n      to: selectedDays[6]\n    },\n    hoverRangeStart: hoverRange && hoverRange.from,\n    hoverRangeEnd: hoverRange && hoverRange.to,\n    selectedRangeStart: daysAreSelected && selectedDays[0],\n    selectedRangeEnd: daysAreSelected && selectedDays[6]\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, selectedDays.length === 7 && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, moment(selectedDays[0]).format('LL'), \" \\u2013 \", ' ', moment(selectedDays[6]).format('LL'))), React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Select a week\"), React.createElement(ModalBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(DayPicker, {\n    selectedDays: selectedDays,\n    locale: 'de',\n    firstDayOfWeek: 1,\n    showWeekNumbers: true,\n    showOutsideDays: true,\n    modifiers: modifiers,\n    onDayClick: handleDayChange,\n    onDayMouseEnter: handleDayEnter,\n    onDayMouseLeave: handleDayLeave,\n    onWeekClick: handleWeekClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }))));\n};\n\nconst getWeekDays = weekStart => {\n  const days = [weekStart];\n\n  for (let i = 1; i < 7; i += 1) {\n    days.push(moment(weekStart).add(i, 'days').toDate());\n  }\n\n  return days;\n};\n\nconst getWeekRange = date => {\n  return {\n    from: moment(date).startOf('week').toDate(),\n    to: moment(date).endOf('week').toDate()\n  };\n};\n\nexport default CurrentWeekPicker;","map":{"version":3,"sources":["/Users/joeljani/3.Personal_Projects/1.Programming/my_gym_app/frontend/src/workouts/CurrentWeekPicker.js"],"names":["React","useEffect","useState","useSelector","useDispatch","Button","Modal","ModalBody","ModalHeader","DayPicker","moment","CurrentWeekPicker","initialWeek","from","Date","startOf","toDate","to","endOf","hoverRange","setHoverRange","undefined","selectedDays","setSelectedDays","modal","setModal","dispatch","toggle","type","currentWeek","handleDayChange","date","getWeekDays","getWeekRange","handleDayEnter","handleDayLeave","handleWeekClick","weekNumber","days","e","daysAreSelected","length","modifiers","selectedRange","hoverRangeStart","hoverRangeEnd","selectedRangeStart","selectedRangeEnd","format","weekStart","i","push","add"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,SAAvB,EAAkCC,WAAlC,QAAoD,YAApD;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAO,gCAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,kBAAP;;AAGA,MAAMC,iBAAiB,GAAG,MAAM;AAE5B,QAAMC,WAAW,GAAG;AAChBC,IAAAA,IAAI,EAAEH,MAAM,CAAC,IAAII,IAAJ,EAAD,CAAN,CACDC,OADC,CACO,MADP,EAEDC,MAFC,EADU;AAIhBC,IAAAA,EAAE,EAAEP,MAAM,CAAC,IAAII,IAAJ,EAAD,CAAN,CACCI,KADD,CACO,MADP,EAECF,MAFD;AAJY,GAApB;AASA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAACmB,SAAD,CAA5C;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAACU,WAAD,CAAhD;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAMwB,QAAQ,GAAGtB,WAAW,EAA5B;;AAEA,QAAMuB,MAAM,GAAG,MAAM;AACjBF,IAAAA,QAAQ,CAAC,CAACD,KAAF,CAAR;AACAE,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAE,kBAAP;AAA2BC,MAAAA,WAAW,EAAEP;AAAxC,KAAD,CAAR;AACH,GAHD;;AAKA,QAAMQ,eAAe,GAAGC,IAAI,IAAI;AAC5BR,IAAAA,eAAe,CAACS,WAAW,CAACC,YAAY,CAACF,IAAD,CAAZ,CAAmBlB,IAApB,CAAZ,CAAf;AACH,GAFD;;AAIA,QAAMqB,cAAc,GAAGH,IAAI,IAAI;AAC3BX,IAAAA,aAAa,CAACa,YAAY,CAACF,IAAD,CAAb,CAAb;AACH,GAFD;;AAIA,QAAMI,cAAc,GAAG,MAAM;AACzBf,IAAAA,aAAa,CAACC,SAAD,CAAb;AACH,GAFD;;AAIA,QAAMe,eAAe,GAAG,CAACC,UAAD,EAAaC,IAAb,EAAmBC,CAAnB,KAAyB;AAC7ChB,IAAAA,eAAe,CAACe,IAAD,CAAf;AACH,GAFD;;AAIA,QAAME,eAAe,GAAGlB,YAAY,CAACmB,MAAb,GAAsB,CAA9C;AAEA,QAAMC,SAAS,GAAG;AACdvB,IAAAA,UADc;AAEdwB,IAAAA,aAAa,EAAEH,eAAe,IAAI;AAC9B3B,MAAAA,IAAI,EAAES,YAAY,CAAC,CAAD,CADY;AAE9BL,MAAAA,EAAE,EAAEK,YAAY,CAAC,CAAD;AAFc,KAFpB;AAMdsB,IAAAA,eAAe,EAAEzB,UAAU,IAAIA,UAAU,CAACN,IAN5B;AAOdgC,IAAAA,aAAa,EAAE1B,UAAU,IAAIA,UAAU,CAACF,EAP1B;AAQd6B,IAAAA,kBAAkB,EAAEN,eAAe,IAAIlB,YAAY,CAAC,CAAD,CARrC;AASdyB,IAAAA,gBAAgB,EAAEP,eAAe,IAAIlB,YAAY,CAAC,CAAD;AATnC,GAAlB;AAaA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEK,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,YAAY,CAACmB,MAAb,KAAwB,CAAxB,IACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK/B,MAAM,CAACY,YAAY,CAAC,CAAD,CAAb,CAAN,CAAwB0B,MAAxB,CAA+B,IAA/B,CADL,cAC8C,GAD9C,EAEKtC,MAAM,CAACY,YAAY,CAAC,CAAD,CAAb,CAAN,CAAwB0B,MAAxB,CAA+B,IAA/B,CAFL,CAFJ,CADJ,EASI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAExB,KAAf;AAAsB,IAAA,MAAM,EAAEG,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AAAa,IAAA,MAAM,EAAEA,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAW,IAAA,YAAY,EAAEL,YAAzB;AACW,IAAA,MAAM,EAAE,IADnB;AAEW,IAAA,cAAc,EAAE,CAF3B;AAGW,IAAA,eAAe,MAH1B;AAIW,IAAA,eAAe,MAJ1B;AAKW,IAAA,SAAS,EAAEoB,SALtB;AAMW,IAAA,UAAU,EAAEZ,eANvB;AAOW,IAAA,eAAe,EAAEI,cAP5B;AAQW,IAAA,eAAe,EAAEC,cAR5B;AASW,IAAA,WAAW,EAAEC,eATxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,CATJ,CADJ;AA2BH,CA/ED;;AAiFA,MAAMJ,WAAW,GAAGiB,SAAS,IAAI;AAC7B,QAAMX,IAAI,GAAG,CAACW,SAAD,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC3BZ,IAAAA,IAAI,CAACa,IAAL,CACIzC,MAAM,CAACuC,SAAD,CAAN,CACKG,GADL,CACSF,CADT,EACY,MADZ,EAEKlC,MAFL,EADJ;AAKH;;AACD,SAAOsB,IAAP;AACH,CAVD;;AAYA,MAAML,YAAY,GAAGF,IAAI,IAAI;AACzB,SAAO;AACHlB,IAAAA,IAAI,EAAEH,MAAM,CAACqB,IAAD,CAAN,CACDhB,OADC,CACO,MADP,EAEDC,MAFC,EADH;AAIHC,IAAAA,EAAE,EAAEP,MAAM,CAACqB,IAAD,CAAN,CACCb,KADD,CACO,MADP,EAECF,MAFD;AAJD,GAAP;AAQH,CATD;;AAWA,eAAeL,iBAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {Button, Modal, ModalBody, ModalHeader} from \"reactstrap\";\nimport DayPicker from \"react-day-picker\";\nimport 'react-day-picker/lib/style.css';\nimport moment from \"moment\";\nimport 'moment/locale/de';\n\n\nconst CurrentWeekPicker = () => {\n\n    const initialWeek = {\n        from: moment(new Date())\n            .startOf('week')\n            .toDate(),\n        to: moment(new Date())\n            .endOf('week')\n            .toDate(),\n    }\n\n    const [hoverRange, setHoverRange] = useState(undefined)\n    const [selectedDays, setSelectedDays] = useState(initialWeek)\n    const [modal, setModal] = useState(false);\n    const dispatch = useDispatch();\n\n    const toggle = () => {\n        setModal(!modal);\n        dispatch({type: \"SET_CURRENT_WEEK\", currentWeek: selectedDays})\n    }\n\n    const handleDayChange = date => {\n        setSelectedDays(getWeekDays(getWeekRange(date).from))\n    };\n\n    const handleDayEnter = date => {\n        setHoverRange(getWeekRange(date))\n    };\n\n    const handleDayLeave = () => {\n        setHoverRange(undefined)\n    };\n\n    const handleWeekClick = (weekNumber, days, e) => {\n        setSelectedDays(days)\n    };\n\n    const daysAreSelected = selectedDays.length > 0;\n\n    const modifiers = {\n        hoverRange,\n        selectedRange: daysAreSelected && {\n            from: selectedDays[0],\n            to: selectedDays[6],\n        },\n        hoverRangeStart: hoverRange && hoverRange.from,\n        hoverRangeEnd: hoverRange && hoverRange.to,\n        selectedRangeStart: daysAreSelected && selectedDays[0],\n        selectedRangeEnd: daysAreSelected && selectedDays[6],\n    };\n\n\n    return (\n        <div>\n            <Button onClick={toggle}>\n                {selectedDays.length === 7 && (\n                <div>\n                    {moment(selectedDays[0]).format('LL')} â€“ {' '}\n                    {moment(selectedDays[6]).format('LL')}\n                </div>\n                )}\n            </Button>\n            <Modal isOpen={modal} toggle={toggle}>\n                <ModalHeader toggle={toggle}>Select a week</ModalHeader>\n                <ModalBody>\n                    <DayPicker selectedDays={selectedDays}\n                               locale={'de'}\n                               firstDayOfWeek={1}\n                               showWeekNumbers\n                               showOutsideDays\n                               modifiers={modifiers}\n                               onDayClick={handleDayChange}\n                               onDayMouseEnter={handleDayEnter}\n                               onDayMouseLeave={handleDayLeave}\n                               onWeekClick={handleWeekClick}/>\n                </ModalBody>\n            </Modal>\n        </div>\n    )\n}\n\nconst getWeekDays = weekStart => {\n    const days = [weekStart];\n    for (let i = 1; i < 7; i += 1) {\n        days.push(\n            moment(weekStart)\n                .add(i, 'days')\n                .toDate()\n        );\n    }\n    return days;\n}\n\nconst getWeekRange = date => {\n    return {\n        from: moment(date)\n            .startOf('week')\n            .toDate(),\n        to: moment(date)\n            .endOf('week')\n            .toDate(),\n    };\n}\n\nexport default CurrentWeekPicker;\n"]},"metadata":{},"sourceType":"module"}